{"remainingRequest":"/Users/jimmybui/Documents/Web&App/example/my_vue_grid/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jimmybui/Documents/Web&App/example/my_vue_grid/frontend/src/components/Bookings.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jimmybui/Documents/Web&App/example/my_vue_grid/frontend/src/components/Bookings.vue","mtime":1569934716000},{"path":"/Users/jimmybui/Documents/Web&App/example/my_vue_grid/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jimmybui/Documents/Web&App/example/my_vue_grid/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jimmybui/Documents/Web&App/example/my_vue_grid/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jimmybui/Documents/Web&App/example/my_vue_grid/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState, mapGetters, mapActions } from 'vuex'\nimport { AgGridVue } from \"ag-grid-vue\"\nimport \"ag-grid-community/dist/styles/ag-grid.css\"\nimport \"ag-grid-community/dist/styles/ag-theme-blue.css\"\nimport { URL } from '../constants/constants'\nimport Popup from './Popup'\nimport Error from './Error'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default {\n    name: 'Bookings',\n    props: ['seller'],\n    components: {\n        AgGridVue,\n        Popup,\n        Error\n    },\n    data() {\n        return {\n            columnDefs: [\n                {   headerName: 'ID', field: 'id', cellClass: \"grid-id\", width: 84, cellRenderer: (data) => {\n                        return data.value.substring(0, 5).toUpperCase();  \n                }},\n                {   headerName: 'Product Name', field: 'productName', width: 300 },\n                {   headerName: 'Quantity', field: 'quantity', cellClass: \"grid-number\", width: 100, cellRenderer: (data) => {\n                        return new Intl.NumberFormat().format(data.value);\n                }},\n                {   headerName: 'Rate', field: 'rate', cellClass: \"grid-number\", width: 84, cellRenderer: (data) => {\n                        return '$ ' + new Intl.NumberFormat('en-US', { minimumFractionDigits: 2 }).format(data.value / 100);\n                }},\n                {   headerName: 'Cost', field: 'cost', cellClass: \"grid-number\", width: 100, cellRenderer: (data) => {\n                        return '$ '+ new Intl.NumberFormat().format(Math.round(data.value));\n                }}\n            ],\n            rowData: null,\n            rowSelection: null,\n            overlayNoRowsTemplate: null,\n            error: null,\n            detail: null\n        }\n    },\n    beforeMount() {\n        axios.get(URL + \"/bookings\")\n        .then(resp => {\n            const products = this.$props.seller.products;\n            const bookings = [];\n            products.map(product => {\n                const data = resp.data.filter(x => x.productId == product.id);\n                data.map(item => {\n                    // Check end date is after today\n                    if(moment(item.endDate).isAfter()) {\n                        const booking = {...item, ...{ productName: product.name, rate: product.rate }};\n                        booking.cost = (product.rate / 1000) * booking.quantity;\n                        bookings.push(booking);\n                    }\n                });\n            })\n            // Sort by start date\n            bookings.sort((a, b) => a.startDate.localeCompare(b.startDate));\n            this.rowData = bookings;\n        })\n        .catch((err) => {\n            // Handle the error\n            this.error = err;\n            // Hide loading\n            this.$refs.loading.handleLoading();\n        });\n\n        this.rowSelection = \"single\";\n        this.overlayNoRowsTemplate = \"No Active Bookings\";\n    },\n    methods: {\n        onGridReady(params) {\n            this.gridApi = params.api;\n            this.gridColumnApi = params.columnApi;\n\n            this.gridApi.sizeColumnsToFit();\n            this.gridColumnApi.autoSizeColumns();\n            \n            window.addEventListener(\"resize\", () => {\n                setTimeout(() => {\n                    this.gridApi.sizeColumnsToFit();\n                    this.gridColumnApi.autoSizeColumns();\n                });\n            });\n        },\n\n        handlePopup(row) {\n            this.detail = row && row.data ? row.data : null;\n            this.$refs.popup.handlePopup();\n        }\n    }\n}\n",{"version":3,"sources":["Bookings.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Bookings.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <span>\n        <ag-grid-vue class=\"grid ag-theme-blue\"\n                    @grid-ready = \"onGridReady\"\n                    :columnDefs = \"columnDefs\"\n                    :rowData = \"rowData\"\n                    :enableSorting = \"true\"\n                    :enableFilter = \"true\"\n                    :paginationAutoPageSize = \"true\"\n                    :pagination = \"true\"\n                    :rowSelection = \"rowSelection\"\n                    :enableColResize = \"true\"\n                    :overlayNoRowsTemplate = \"overlayNoRowsTemplate\"\n                    @row-double-clicked = \"handlePopup\"\n                 >\n        </ag-grid-vue>\n        <Popup ref=\"popup\" message=\"Show the detail of booking\" :detail=\"detail\" />\n        <Error v-if=\"error && error.message\" :message=\"error.message\" />\n    </span>\n</template>\n\n<script>\nimport { mapState, mapGetters, mapActions } from 'vuex'\nimport { AgGridVue } from \"ag-grid-vue\"\nimport \"ag-grid-community/dist/styles/ag-grid.css\"\nimport \"ag-grid-community/dist/styles/ag-theme-blue.css\"\nimport { URL } from '../constants/constants'\nimport Popup from './Popup'\nimport Error from './Error'\nimport axios from 'axios'\nimport moment from 'moment'\n\nexport default {\n    name: 'Bookings',\n    props: ['seller'],\n    components: {\n        AgGridVue,\n        Popup,\n        Error\n    },\n    data() {\n        return {\n            columnDefs: [\n                {   headerName: 'ID', field: 'id', cellClass: \"grid-id\", width: 84, cellRenderer: (data) => {\n                        return data.value.substring(0, 5).toUpperCase();  \n                }},\n                {   headerName: 'Product Name', field: 'productName', width: 300 },\n                {   headerName: 'Quantity', field: 'quantity', cellClass: \"grid-number\", width: 100, cellRenderer: (data) => {\n                        return new Intl.NumberFormat().format(data.value);\n                }},\n                {   headerName: 'Rate', field: 'rate', cellClass: \"grid-number\", width: 84, cellRenderer: (data) => {\n                        return '$ ' + new Intl.NumberFormat('en-US', { minimumFractionDigits: 2 }).format(data.value / 100);\n                }},\n                {   headerName: 'Cost', field: 'cost', cellClass: \"grid-number\", width: 100, cellRenderer: (data) => {\n                        return '$ '+ new Intl.NumberFormat().format(Math.round(data.value));\n                }}\n            ],\n            rowData: null,\n            rowSelection: null,\n            overlayNoRowsTemplate: null,\n            error: null,\n            detail: null\n        }\n    },\n    beforeMount() {\n        axios.get(URL + \"/bookings\")\n        .then(resp => {\n            const products = this.$props.seller.products;\n            const bookings = [];\n            products.map(product => {\n                const data = resp.data.filter(x => x.productId == product.id);\n                data.map(item => {\n                    // Check end date is after today\n                    if(moment(item.endDate).isAfter()) {\n                        const booking = {...item, ...{ productName: product.name, rate: product.rate }};\n                        booking.cost = (product.rate / 1000) * booking.quantity;\n                        bookings.push(booking);\n                    }\n                });\n            })\n            // Sort by start date\n            bookings.sort((a, b) => a.startDate.localeCompare(b.startDate));\n            this.rowData = bookings;\n        })\n        .catch((err) => {\n            // Handle the error\n            this.error = err;\n            // Hide loading\n            this.$refs.loading.handleLoading();\n        });\n\n        this.rowSelection = \"single\";\n        this.overlayNoRowsTemplate = \"No Active Bookings\";\n    },\n    methods: {\n        onGridReady(params) {\n            this.gridApi = params.api;\n            this.gridColumnApi = params.columnApi;\n\n            this.gridApi.sizeColumnsToFit();\n            this.gridColumnApi.autoSizeColumns();\n            \n            window.addEventListener(\"resize\", () => {\n                setTimeout(() => {\n                    this.gridApi.sizeColumnsToFit();\n                    this.gridColumnApi.autoSizeColumns();\n                });\n            });\n        },\n\n        handlePopup(row) {\n            this.detail = row && row.data ? row.data : null;\n            this.$refs.popup.handlePopup();\n        }\n    }\n}\n</script>"]}]}